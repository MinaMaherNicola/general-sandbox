version: '3.8'

services:
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.0
    container_name: elasticsearch1
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - node.name=node-1
      - cluster.name=my-cluster
      - discovery.seed_hosts=elasticsearch1,elasticsearch2
      - cluster.initial_master_nodes=node-1,node-2
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - network.host=0.0.0.0
    volumes:
      - es-data1:/usr/share/elasticsearch/data
    healthcheck:
      test: curl --fail http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 30

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.0
    container_name: elasticsearch2
    ports:
      - '9201:9200' # Optional: Only needed if you want direct access to the second node
      - '9301:9300' # Optional: For transport client communication
    environment:
      - node.name=node-2
      - cluster.name=my-cluster
      - discovery.seed_hosts=elasticsearch1,elasticsearch2
      - cluster.initial_master_nodes=node-1,node-2
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - network.host=0.0.0.0
    volumes:
      - es-data2:/usr/share/elasticsearch/data
    healthcheck:
      test: curl --fail http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 30

  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.0
    container_name: kibana
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch1:9200
      - SERVER_HOST=0.0.0.0
    volumes:
      - kibana-config:/usr/share/kibana/config
    depends_on:
      elasticsearch1:
        condition: service_healthy
      elasticsearch2:
        condition: service_healthy

volumes:
  es-data1:
  es-data2:
  kibana-config:
